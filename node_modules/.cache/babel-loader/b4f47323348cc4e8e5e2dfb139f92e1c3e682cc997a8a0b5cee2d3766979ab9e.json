{"ast":null,"code":"var _jsxFileName = \"/Users/bsavanachai/Desktop/DataWowFe/src/Dropdown.tsx\",\n  _s = $RefreshSig$();\n// CustomDropdown.tsx\nimport React, { useState, useRef, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dropdown = ({\n  options,\n  onSelect\n}) => {\n  _s();\n  const [isOpen, setIsOpen] = useState(false);\n  const [selectedOption, setSelectedOption] = useState(options[0]);\n  const dropdownRef = useRef(null);\n  useEffect(() => {\n    const handleClickOutside = event => {\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {\n        setIsOpen(false);\n      }\n    };\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => document.removeEventListener('mousedown', handleClickOutside);\n  }, [dropdownRef]);\n  const handleSelect = option => {\n    setSelectedOption(option);\n    onSelect(option);\n    setIsOpen(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dropdown\",\n    ref: dropdownRef,\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"dropdown-toggle\",\n      onClick: () => setIsOpen(!isOpen),\n      children: [selectedOption, \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"\\u25BC\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 34\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this), isOpen && /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"dropdown-menu\",\n      children: options.map((option, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        onClick: () => handleSelect(option),\n        children: option\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this);\n};\n_s(Dropdown, \"cynDb7UD6NXkCVY8rgFgQRG1mvk=\");\n_c = Dropdown;\nexport default Dropdown;\nvar _c;\n$RefreshReg$(_c, \"Dropdown\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","Dropdown","options","onSelect","_s","isOpen","setIsOpen","selectedOption","setSelectedOption","dropdownRef","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","handleSelect","option","className","ref","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","index","_c","$RefreshReg$"],"sources":["/Users/bsavanachai/Desktop/DataWowFe/src/Dropdown.tsx"],"sourcesContent":["// CustomDropdown.tsx\nimport React, { useState, useRef, useEffect, FC } from 'react';\n\ninterface DropdownProps {\n    options: string[];\n    onSelect: (selectedOption: string) => void;\n}\n\nconst Dropdown: FC<DropdownProps> = ({ options, onSelect }) => {\n    const [isOpen, setIsOpen] = useState(false);\n    const [selectedOption, setSelectedOption] = useState(options[0]);\n    const dropdownRef = useRef<HTMLDivElement>(null);\n\n    useEffect(() => {\n        const handleClickOutside = (event: MouseEvent) => {\n            if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {\n                setIsOpen(false);\n            }\n        };\n\n        document.addEventListener('mousedown', handleClickOutside);\n        return () => document.removeEventListener('mousedown', handleClickOutside);\n    }, [dropdownRef]);\n\n    const handleSelect = (option: string) => {\n        setSelectedOption(option);\n        onSelect(option);\n        setIsOpen(false);\n    };\n\n    return (\n        <div className=\"dropdown\" ref={dropdownRef}>\n            <button className=\"dropdown-toggle\" onClick={() => setIsOpen(!isOpen)}>\n                {selectedOption} <span>&#9660;</span>\n            </button>\n            {isOpen && (\n                <ul className=\"dropdown-menu\">\n                    {options.map((option, index) => (\n                        <li key={index} onClick={() => handleSelect(option)}>\n                            {option}\n                        </li>\n                    ))}\n                </ul>\n            )}\n        </div>\n    );\n};\n\nexport default Dropdown;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAY,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAO/D,MAAMC,QAA2B,GAAGA,CAAC;EAAEC,OAAO;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC3D,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAC3C,MAAM,CAACW,cAAc,EAAEC,iBAAiB,CAAC,GAAGZ,QAAQ,CAACM,OAAO,CAAC,CAAC,CAAC,CAAC;EAChE,MAAMO,WAAW,GAAGZ,MAAM,CAAiB,IAAI,CAAC;EAEhDC,SAAS,CAAC,MAAM;IACZ,MAAMY,kBAAkB,GAAIC,KAAiB,IAAK;MAC9C,IAAIF,WAAW,CAACG,OAAO,IAAI,CAACH,WAAW,CAACG,OAAO,CAACC,QAAQ,CAACF,KAAK,CAACG,MAAc,CAAC,EAAE;QAC5ER,SAAS,CAAC,KAAK,CAAC;MACpB;IACJ,CAAC;IAEDS,QAAQ,CAACC,gBAAgB,CAAC,WAAW,EAAEN,kBAAkB,CAAC;IAC1D,OAAO,MAAMK,QAAQ,CAACE,mBAAmB,CAAC,WAAW,EAAEP,kBAAkB,CAAC;EAC9E,CAAC,EAAE,CAACD,WAAW,CAAC,CAAC;EAEjB,MAAMS,YAAY,GAAIC,MAAc,IAAK;IACrCX,iBAAiB,CAACW,MAAM,CAAC;IACzBhB,QAAQ,CAACgB,MAAM,CAAC;IAChBb,SAAS,CAAC,KAAK,CAAC;EACpB,CAAC;EAED,oBACIN,OAAA;IAAKoB,SAAS,EAAC,UAAU;IAACC,GAAG,EAAEZ,WAAY;IAAAa,QAAA,gBACvCtB,OAAA;MAAQoB,SAAS,EAAC,iBAAiB;MAACG,OAAO,EAAEA,CAAA,KAAMjB,SAAS,CAAC,CAACD,MAAM,CAAE;MAAAiB,QAAA,GACjEf,cAAc,EAAC,GAAC,eAAAP,OAAA;QAAAsB,QAAA,EAAM;MAAO;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjC,CAAC,EACRtB,MAAM,iBACHL,OAAA;MAAIoB,SAAS,EAAC,eAAe;MAAAE,QAAA,EACxBpB,OAAO,CAAC0B,GAAG,CAAC,CAACT,MAAM,EAAEU,KAAK,kBACvB7B,OAAA;QAAgBuB,OAAO,EAAEA,CAAA,KAAML,YAAY,CAACC,MAAM,CAAE;QAAAG,QAAA,EAC/CH;MAAM,GADFU,KAAK;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CACP;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CACP;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd,CAAC;AAACvB,EAAA,CAtCIH,QAA2B;AAAA6B,EAAA,GAA3B7B,QAA2B;AAwCjC,eAAeA,QAAQ;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}